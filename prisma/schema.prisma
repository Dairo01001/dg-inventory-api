// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model ProductStatus {
  id     Int     @id @default(autoincrement())
  name   String  @unique @db.VarChar(50)
  status Boolean @default(true)

  products Product[]
}

model Category {
  id     Int     @id @default(autoincrement())
  name   String  @unique @db.VarChar(50)
  status Boolean @default(true)

  subcategories Subcategory[]
}

model Subcategory {
  id     Int     @id @default(autoincrement())
  name   String  @unique @db.VarChar(50)
  status Boolean @default(true)

  parent               Category               @relation(fields: [parentId], references: [id])
  parentId             Int
  subcategoryOnProduct SubcategoryOnProduct[]
}

model SubcategoryOnProduct {
  assignedAt DateTime @default(now())

  product       Product     @relation(fields: [productId], references: [id])
  productId     String
  subcategory   Subcategory @relation(fields: [subcategoryId], references: [id])
  subcategoryId Int

  @@id([productId, subcategoryId])
}

model Unit {
  id     Int     @id @default(autoincrement())
  name   String  @unique @db.VarChar(50)
  status Boolean @default(true)

  products Product[]
}

model Product {
  id          String  @id @default(uuid())
  name        String  @db.VarChar(255)
  code        String  @db.VarChar(50)
  price       Decimal @db.Decimal(10, 2)
  stock       Int     @default(0)
  description String? @db.Text
  image       String? @db.VarChar(255)
  amount      Decimal @db.Decimal(10, 2)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  status               ProductStatus          @relation(fields: [statusId], references: [id])
  statusId             Int
  unit                 Unit                   @relation(fields: [unitId], references: [id])
  unitId               Int
  subcategoryOnProduct SubcategoryOnProduct[]
}
